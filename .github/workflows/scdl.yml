name: SoundCloud Download & Sync Playlist (SCDL)

on:
  workflow_dispatch:
    inputs:
      url:
        description: 'SoundCloud URL (Track/Playlist/User)'
        required: true
        default: 'https://soundcloud.com/psylobrain/sets/psyauto'
      sync:
        description: 'Verwende Sync-Funktion mit Archivdatei'
        required: false
        default: 'false'
      overwrite:
        description: 'Überschreibe existierende Dateien'
        required: false
        default: 'false'
      metadata:
        description: 'Erzwinge Metadaten auf bereits heruntergeladenen Tracks'
        required: false
        default: 'false'

jobs:
  download_and_commit:
    runs-on: ubuntu-latest

    steps:
      # 1. Repository auschecken
      - name: Repository auschecken
        uses: actions/checkout@v3

      # 2. Python einrichten
      - name: Python einrichten
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 3. MoviePy und andere notwendige Pakete installieren
      - name: MoviePy, SCDL, FFmpeg  installieren
        run: |
          pip install moviepy git+https://github.com/scdl-org/scdl.git
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      # 5. Standardpfade festlegen
      - name: Standardpfade festlegen
        id: define_paths
        run: |
          SYNC_FILE="${GITHUB_WORKSPACE}/archive.txt"
          DOWNLOAD_PATH="${GITHUB_WORKSPACE}/downloads"
          CONVERTED_PATH="${GITHUB_WORKSPACE}/downloads/converted"
          
          mkdir -p "$DOWNLOAD_PATH"
          mkdir -p "$(dirname "$SYNC_FILE")"
          mkdir -p "$CONVERTED_PATH"
          [ -f "$SYNC_FILE" ] || touch "$SYNC_FILE"
          echo "download_path=$DOWNLOAD_PATH" >> $GITHUB_ENV
          echo "converted_path=$CONVERTED_PATH" >> $GITHUB_ENV
          echo "sync_file=$SYNC_FILE" >> $GITHUB_ENV

      # 6. SCDL-Befehl vorbereiten
      - name: SCDL-Befehl vorbereiten
        id: prepare_scdl_command
        run: |
          scdl_command="scdl"
          if [[ -n "${{ github.event.inputs.url }}" ]]; then
            scdl_command+=" -l '${{ github.event.inputs.url }}'"
          fi
          if [[ "${{ github.event.inputs.sync }}" == "true" ]]; then
            scdl_command+=" --sync '${{ env.sync_file }}'"
          fi
          if [[ "${{ github.event.inputs.metadata }}" == "true" ]]; then
            scdl_command+=" --force-metadata"
          fi
          if [[ "${{ github.event.inputs.overwrite }}" == "true" ]]; then
            scdl_command+=" --overwrite"
          fi
          scdl_command+=" --download-archive '${{ env.sync_file }}' --path '${{ env.download_path }}' --hide-progress"
          echo "scdl_command=$scdl_command" >> $GITHUB_ENV

      # 7. SCDL-Befehl ausführen
      - name: SCDL ausführen
        run: |
          echo "SCDL-Befehl wird ausgeführt:"
          echo "${{ env.scdl_command }}"
          eval "${{ env.scdl_command }}"

      # 8. Audio zu Video mit MoviePy konvertieren (using convert.py)
      - name: Audio zu Video konvertieren mit MoviePy
        run: |
          IMAGE_URL="https://images3.alphacoders.com/857/857795.png"
          IMAGE_PATH="${GITHUB_WORKSPACE}/video_cover.png"
          
          # Lade das Coverbild herunter
          echo "Lade das Coverbild herunter..."
          curl -o "$IMAGE_PATH" "$IMAGE_URL"

          # Verarbeite alle heruntergeladenen MP3-Dateien und konvertiere sie in Videos
          echo "Starte die Konvertierung der Audio-Dateien in Videos..."
          for audio_file in "${GITHUB_WORKSPACE}/downloads"/*.mp3; do
            [ -e "$audio_file" ] || continue
            base_name=$(basename "$audio_file" .mp3)
            echo "Konvertiere: $audio_file"

            # Führe das convert.py Skript aus
            python3 ${GITHUB_WORKSPACE}/convert.py "$audio_file" "$IMAGE_PATH" "${GITHUB_WORKSPACE}/downloads/converted/$base_name.mp4"
          done

      # 9. `archive.txt`, heruntergeladene Tracks und konvertierte Videos aktualisieren und commiten
      - name: archive und Downloads aktualisieren und commiten
        run: |
          # Git-Konfiguration
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

          # Dateien und Ordner zum Commit hinzufügen
          git add "${{ env.sync_file }}"
          git add "${{ env.download_path }}/"
          git add "${{ env.converted_path }}/"

          # Änderungen committen und pushen
          git commit -m "Aktualisiere archive.txt, füge heruntergeladene Tracks und konvertierte Videos hinzu"
          git push
