name: SCDL

on:
  workflow_dispatch:
    inputs:
      url:
        description: 'SoundCloud URL (track/playlist/user)'
        required: true
        default: 'https://soundcloud.com/psylobrain/sets/psyauto'
      download_all:
        description: 'Download all tracks of a user (including reposts)'
        required: false
        default: 'false'
      download_uploads:
        description: 'Download all uploads of a user (no reposts)'
        required: false
        default: 'false'
      download_favorites:
        description: 'Download all favorites (likes) of a user'
        required: false
        default: 'false'
      download_playlists:
        description: 'Download all playlists of a user'
        required: false
        default: 'false'
      download_reposts:
        description: 'Download all reposts of a user'
        required: false
        default: 'false'
      continue_download:
        description: 'Continue if a file already exists'
        required: false
        default: 'false'
      sync:
        description: 'Use sync function with an archive file'
        required: false
        default: 'false'
      flac:
        description: 'Convert original files to FLAC'
        required: false
        default: 'false'
      overwrite:
        description: 'Overwrite existing files'
        required: false
        default: 'false'
      metadata:
        description: 'Force metadata setting on already downloaded tracks'
        required: false
        default: 'false'
      hide_progress:
        description: 'Hide download progress bar'
        required: false
        default: 'true'

jobs:
  download_and_commit:
    runs-on: ubuntu-latest

    steps:
    # Repository Checkout
    - name: Checkout Repository
      uses: actions/checkout@v3

    # Install Python and Pip
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # Install FFmpeg
    - name: Install FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    # Install SCDL
    - name: Install SCDL
      run: pip install git+https://github.com/scdl-org/scdl.git

    # Define Default Paths Using GitHub Workspace
    - name: Define Default Paths
      id: define_paths
      run: |
        # Use default paths in the repository
        DOWNLOAD_PATH="${GITHUB_WORKSPACE}/downloads"
        SYNC_FILE="${GITHUB_WORKSPACE}/sync/archive.txt"

        # Ensure directories exist
        mkdir -p "$DOWNLOAD_PATH"
        mkdir -p "$(dirname "$SYNC_FILE")"

        # Initialize the sync file if it doesn't exist
        [ -f "$SYNC_FILE" ] || touch "$SYNC_FILE"

        echo "::set-output name=download_path::$DOWNLOAD_PATH"
        echo "::set-output name=sync_file::$SYNC_FILE"

    # Prepare SCDL Command
    - name: Prepare SCDL Command
      id: prepare_scdl_command
      run: |
        scdl_command="scdl"

        # Add the URL
        if [[ -n "${{ github.event.inputs.url }}" ]]; then
          scdl_command+=" -l '${{ github.event.inputs.url }}'"
        fi

        # Add options
        if [[ "${{ github.event.inputs.download_all }}" == "true" ]]; then
          scdl_command+=" -a"
        fi
        if [[ "${{ github.event.inputs.download_uploads }}" == "true" ]]; then
          scdl_command+=" -t"
        fi
        if [[ "${{ github.event.inputs.download_favorites }}" == "true" ]]; then
          scdl_command+=" -f"
        fi
        if [[ "${{ github.event.inputs.download_playlists }}" == "true" ]]; then
          scdl_command+=" -p"
        fi
        if [[ "${{ github.event.inputs.download_reposts }}" == "true" ]]; then
          scdl_command+=" -r"
        fi
        if [[ "${{ github.event.inputs.continue_download }}" == "true" ]]; then
          scdl_command+=" -c"
        fi
        if [[ "${{ github.event.inputs.sync }}" == "true" ]]; then
          scdl_command+=" --sync '${{ steps.define_paths.outputs.sync_file }}'"
        fi
        if [[ "${{ github.event.inputs.metadata }}" == "true" ]]; then
          scdl_command+=" --force-metadata"
        fi
        if [[ "${{ github.event.inputs.flac }}" == "true" ]]; then
          scdl_command+=" --flac"
        fi
        if [[ "${{ github.event.inputs.overwrite }}" == "true" ]]; then
          scdl_command+=" --overwrite"
        fi
        if [[ "${{ github.event.inputs.hide_progress }}" == "true" ]]; then
          scdl_command+=" --hide-progress"
        fi

        # Always add the download archive and path options
        scdl_command+=" --download-archive '${{ steps.define_paths.outputs.sync_file }}' --path '${{ steps.define_paths.outputs.download_path }}'"

        echo "::set-output name=scdl_command::$scdl_command"

    # Run SCDL Command
    - name: Run SCDL
      run: |
        echo "Running SCDL command:"
        echo "${{ steps.prepare_scdl_command.outputs.scdl_command }}"
        eval "${{ steps.prepare_scdl_command.outputs.scdl_command }}"

    # Commit and Push Changes using Git commands
    - name: Commit and Push Changes
      run: |
        cd "${{ steps.define_paths.outputs.download_path }}"
        
        # Setup Git config
        git config user.name "${{ github.actor }}"
        git config user.email "davenplay@gmail.com"
        
        # Stage and commit the downloaded tracks
        git add .
        downloaded_tracks=$(ls -1)
        
        if [ -n "$downloaded_tracks" ]; then
          commit_message="Added newly downloaded tracks to archive\n\n$(echo "$downloaded_tracks" | sed 's/^/- /')"
          git commit -m "$commit_message"
          git push
        else
          echo "No new tracks to commit."
