name: SoundCloud Download & Sync (SCDL)

on:
  workflow_dispatch:
    inputs:
      url:
        description: 'SoundCloud URL (Track/Playlist/User)'
        required: true
        default: 'https://soundcloud.com/psylobrain/sets/psyauto'
      download_uploads:
        description: 'Lade alle Uploads eines Nutzers herunter (keine Reposts)'
        required: false
        default: 'false'
      download_favorites:
        description: 'Lade alle Favoriten (Likes) eines Nutzers herunter'
        required: false
        default: 'false'
      download_playlists:
        description: 'Lade alle Playlists eines Nutzers herunter'
        required: false
        default: 'false'
      continue_download:
        description: 'Setze fort, wenn eine Datei bereits existiert'
        required: false
        default: 'false'
      sync:
        description: 'Verwende Sync-Funktion mit Archivdatei'
        required: false
        default: 'false'
      overwrite:
        description: 'Überschreibe existierende Dateien'
        required: false
        default: 'false'
      metadata:
        description: 'Erzwinge Metadaten auf bereits heruntergeladenen Tracks'
        required: false
        default: 'false'
      custom_download_path:
        description: 'Optional: Benutzerdefinierter Download-Pfad (Standard: repo workspace/downloads)'
        required: false
        default: ''

jobs:
  download_and_commit:
    runs-on: ubuntu-latest

    steps:
      # 1. Repository auschecken
      - name: Repository auschecken
        uses: actions/checkout@v3

      # 2. Python einrichten
      - name: Python einrichten
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 3. FFmpeg installieren
      - name: FFmpeg installieren
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      # 4. SCDL installieren
      - name: SCDL installieren
        run: pip install git+https://github.com/scdl-org/scdl.git

      # 5. Standardpfade festlegen
      - name: Standardpfade festlegen
        id: define_paths
        run: |
          SYNC_FILE="${GITHUB_WORKSPACE}/archive.txt"
          # Wenn kein benutzerdefinierter Pfad angegeben ist, standardmäßig im "downloads"-Ordner des Repos
          if [ -z "${{ github.event.inputs.custom_download_path }}" ]; then
            DOWNLOAD_PATH="${GITHUB_WORKSPACE}/downloads"
          else
            # Wenn ein benutzerdefinierter Pfad angegeben wird, innerhalb des Downloads-Ordners
            DOWNLOAD_PATH="${GITHUB_WORKSPACE}/downloads/${{ github.event.inputs.custom_download_path }}"
          fi
          # Sicherstellen, dass die Ordner existieren, sonst erstellen
          mkdir -p "$DOWNLOAD_PATH"
          mkdir -p "$(dirname "$SYNC_FILE")"
          [ -f "$SYNC_FILE" ] || touch "$SYNC_FILE"
          echo "download_path=$DOWNLOAD_PATH" >> $GITHUB_ENV
          echo "sync_file=$SYNC_FILE" >> $GITHUB_ENV
          
      # 6. SCDL-Befehl vorbereiten
      - name: SCDL-Befehl vorbereiten
        id: prepare_scdl_command
        run: |
          scdl_command="scdl"
          if [[ -n "${{ github.event.inputs.url }}" ]]; then
            scdl_command+=" -l '${{ github.event.inputs.url }}'"
          fi
          if [[ "${{ github.event.inputs.download_uploads }}" == "true" ]]; then
            scdl_command+=" -t"
          fi
          if [[ "${{ github.event.inputs.download_favorites }}" == "true" ]]; then
            scdl_command+=" -f"
          fi
          if [[ "${{ github.event.inputs.download_playlists }}" == "true" ]]; then
            scdl_command+=" -p"
          fi
          if [[ "${{ github.event.inputs.continue_download }}" == "true" ]]; then
            scdl_command+=" -c"
          fi
          if [[ "${{ github.event.inputs.sync }}" == "true" ]]; then
            scdl_command+=" --sync '${{ env.sync_file }}'"
          fi
          if [[ "${{ github.event.inputs.metadata }}" == "true" ]]; then
            scdl_command+=" --force-metadata"
          fi
          if [[ "${{ github.event.inputs.overwrite }}" == "true" ]]; then
            scdl_command+=" --overwrite"
          fi
          scdl_command+=" --download-archive '${{ env.sync_file }}' --path '${{ env.download_path }}' --hide-progress"
          echo "scdl_command=$scdl_command" >> $GITHUB_ENV

      # 7. SCDL-Befehl ausführen
      - name: SCDL ausführen
        run: |
          echo "SCDL-Befehl wird ausgeführt:"
          echo "${{ env.scdl_command }}"
          eval "${{ env.scdl_command }}"

      # 8. `archive.txt` aktualisieren und commiten
      - name: `archive.txt` aktualisieren und commiten
        run: |
          # Git-Konfiguration
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add "${{ env.sync_file }}"
          git commit -m "Aktualisiere archive.txt mit neuen heruntergeladenen Tracks"
          git push

      # 9. Logs hochladen, falls Fehler auftritt
      - name: Logs hochladen
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: scdl-logs
          path: ./logs/
