name: SoundCloud Download & Sync Playlist (SCDL)

on:
  workflow_dispatch:
    inputs:
      url:
        description: 'SoundCloud URL (Track/Playlist/User)'
        required: true
        default: 'https://soundcloud.com/psylobrain/sets/psyauto'
      sync:
        description: 'Verwende Sync-Funktion mit Archivdatei'
        required: false
        default: 'false'
      overwrite:
        description: 'Überschreibe existierende Dateien'
        required: false
        default: 'false'
      metadata:
        description: 'Erzwinge Metadaten auf bereits heruntergeladenen Tracks'
        required: false
        default: 'false'

jobs:
  download_and_commit:
    runs-on: ubuntu-latest

    steps:
      # 1. Repository auschecken
      - name: Repository auschecken
        uses: actions/checkout@v3

      # 2. Python einrichten
      - name: Python einrichten
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 3. MoviePy und andere notwendige Pakete installieren
      - name: MoviePy, SCDL, FFmpeg installieren
        run: |
          sudo apt-get update -y
          pip install git+https://github.com/scdl-org/scdl.git
          sudo apt-get install -y ffmpeg

      # 4. Klone das ffmpeg-audio-to-video Repository
      - name: Klone ffmpeg-audio-to-video Repository
        run: |
          git clone https://github.com/michaelck/ffmpeg-audio-to-video.git ${GITHUB_WORKSPACE}/ffmpeg-audio-to-video
          mkdir -p ${GITHUB_WORKSPACE}/ffmpeg-audio-to-video/input ${GITHUB_WORKSPACE}/ffmpeg-audio-to-video/output

      # 5. Standardpfade festlegen
      - name: Standardpfade festlegen
        id: define_paths
        run: |
          echo "SYNC_FILE=${GITHUB_WORKSPACE}/archive.txt" >> $GITHUB_ENV
          echo "DOWNLOAD_PATH=${GITHUB_WORKSPACE}/ffmpeg-audio-to-video/input" >> $GITHUB_ENV
          echo "CONVERTED_PATH=${GITHUB_WORKSPACE}/ffmpeg-audio-to-video/output" >> $GITHUB_ENV

      # 6. SCDL-Befehl vorbereiten
      - name: SCDL-Befehl vorbereiten
        id: prepare_scdl_command
        run: |
          scdl_command="scdl"
          if [[ -n "${{ github.event.inputs.url }}" ]]; then
            scdl_command+=" -l '${{ github.event.inputs.url }}'"
          fi
          if [[ "${{ github.event.inputs.sync }}" == "true" ]]; then
            scdl_command+=" --sync '${{ env.SYNC_FILE }}'"
          fi
          if [[ "${{ github.event.inputs.metadata }}" == "true" ]]; then
            scdl_command+=" --force-metadata"
          fi
          if [[ "${{ github.event.inputs.overwrite }}" == "true" ]]; then
            scdl_command+=" --overwrite"
          fi
          scdl_command+=" --download-archive '${{ env.SYNC_FILE }}' --path '${{ env.DOWNLOAD_PATH }}' --hide-progress"
          echo "scdl_command=$scdl_command" >> $GITHUB_ENV

      # 7. SCDL-Befehl ausführen und Audio zu Video konvertieren
      - name: SCDL ausführen und Audio zu Video konvertieren
        run: |
          echo "SCDL-Befehl wird ausgeführt:"
          echo "${{ env.scdl_command }}"
          eval "${{ env.scdl_command }}"

          # Überprüfen, ob MP3-Dateien heruntergeladen wurden
          if compgen -G "${{ env.DOWNLOAD_PATH }}/*.mp3" > /dev/null; then
            # Lade das Coverbild herunter
            IMAGE_URL="https://images3.alphacoders.com/857/857795.png"
            IMAGE_PATH="${GITHUB_WORKSPACE}/ffmpeg-audio-to-video/poster.jpg"
            echo "Lade das Coverbild herunter..."
            curl -o "$IMAGE_PATH" "$IMAGE_URL"

            # Füge die heruntergeladenen MP3-Dateien in den Input-Ordner ein
            cp "${{ env.DOWNLOAD_PATH }}/*" "${GITHUB_WORKSPACE}/ffmpeg-audio-to-video/input/"

            # Führe das create.sh-Skript aus
            echo "Starte die Konvertierung der Audio-Dateien in Videos mit create.sh..."
            cd ${GITHUB_WORKSPACE}/ffmpeg-audio-to-video
            chmod +x create.sh
            ./create.sh

            # Konvertierte Videos in den definierten Pfad kopieren
            echo "Kopiere konvertierte Videos in den definierten Pfad..."
            cp "${GITHUB_WORKSPACE}/ffmpeg-audio-to-video/output/*" "${{ env.CONVERTED_PATH }}/"
          else
            echo "Keine MP3-Dateien zum Kopieren gefunden."
          fi

      # 8. `archive.txt`, heruntergeladene Tracks und konvertierte Videos aktualisieren und commiten
      - name: archive und Downloads aktualisieren und commiten
        run: |
          # Git-Konfiguration
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

          # Dateien und Ordner zum Commit hinzufügen
          git add "${{ env.SYNC_FILE }}"
          git add "${{ env.DOWNLOAD_PATH }}/"
          git add "${{ env.CONVERTED_PATH }}/"

          # Änderungen committen und pushen
          git commit -m "Aktualisiere archive.txt, füge heruntergeladene Tracks und konvertierte Videos hinzu"
          git push

      # 9. Vorherige GitHub Actions Runs löschen
      - name: Vorherige GitHub Actions Runs löschen
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        run: |
          echo "Lösche vorherige GitHub Actions Runs..."
          runs=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?per_page=100" | \
            jq -r '.workflow_runs[] | select(.status == "completed") | .id')
          for run in $runs; do
            echo "Lösche Run ID: $run"
            curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/$run"
          done
